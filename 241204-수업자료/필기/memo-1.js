/*
# Json 데이터
- javascript object Notaton
- {속성 : 값}의 형식으로 데이터를 저장

1) json 데이터 특징
- 키값이 반드시 쌍따옴표, 함수 x, 
- 데이터 형식 : 문자열, 숫자, boolean, null, 객체 
- 데이터 교환을 위한 텍스트 포맷

2) js 객체와 데이터 (둘의 다른 점 기억해두기)
- 쌍따옴표, 홀따옴표 둘다 사용가능, 키값이 따옴표 묶이지 않아도 사용가능
- 데이터 형식 : 모든 데이터 가능 (함수 포함)
- 프로그램 내부의 데이터 관리 용도


[
  {
    "name"   : "홍길동",
    "age" : 30
  },
  {
    "name"   : "홍길동",
    "age" : 30
  },
  {
    "name"   : "홍길동",
    "age" : 30
  }
]


# 참고 : xml 데이터
- 태그를 이용하여 데이터 저장

<person>
  <name>홍길동</name>
  <age>30</age>
</person>


# HTML Collection vs NodeList 공통점과 차이점

1) 공통점
- 유사 배열 - 인덱스 번호로 선택
- 기능이 제한적(배열의 모든 기능을 사용x)

2) 차이점
* HTML Collection
- 동적 : 중간에 해당 요소가 추가되면 자동으로 업데이트 
- 생성 : getElementsByTagName, getElementsByClassName
- 실시간으로 추가, 업데이트가 많은 경우

# NodeList
- 정적 : 처음에 선택한 시점으로 고정, 중간에 추가되어도 업데이트x
- 생성 : querySelectorAll
- 장점 : 선택자로 자유롭게 선택 가능
- 선택된 요소들이 한번 사용하고 더 이상 변경이 없는 경우
- 만약 업데이가 된 경우에는 다시 생성 해줘야 함.
- 배열로 변환해서 사용하기도 한다.



# 이벤트 
- 컴퓨터에서 발생하는 어떤 상황

1) 이벤트 발생시키는 구문
- 요소.addEventListener('submit', function(){});
- 요소.addEventListener('submit', () => {});
- 요소.addEventListener('submit', 함수이름 );

2) 이벤트 종류

    * 마우스 관련
    - 클릭 - click
    - 더블 클릭 - DblClick
    - 마우스 휠 - mousewheel (파이어폭스는 이름이 다름)
    - 마우스 올리면 - mouseenter
    - 마우스 떠나면 - mouseleave 

    * 브라우저
    - scroll (스크롤이 움직 일때)
    - resize (창크기가 조절될 때)

    * 키보드
    - 포커스 = focusin 
    - 포커스 - focusout

    * 폼
    - submit - 전송 버튼을 눌러서 서버로 데이터를 전송하는 상황일때

    이벤트가 발생하면 특정한 동작을 실행시켜 주는 메서드
    - 대상.addEventLisner('이벤트이름', 함수)


# 자바스크립트 함수 정리: 람다식과 배열 메서드

1) 람다식 (Arrow Function)
- 함수를 간결하게 표현하는 방법
- (매개변수) => { 함수 본문 } 형태로 사용
- return 문이 한 줄이면 생략 가능


2) 배열 메서드
- 배열의 요소를 처리하는 다양한 기능 제공
- 람다식과 함께 사용하여 코드를 효율적으로 작성


(1) forEach
- 데이터를 출력, 각 요소에 대한 간단한 작업을 수행할 때 사용
(2) map
- 배열의 각 요소를 <변환>하여 <새로운 배열을 생성>
- 원본 배열은 변경되지 않음
(3) filter
- <조건에 맞는> 요소만 추출하여 <새로운 배열을 생성>
(4) sort
- 배열의 요소를 특정 기준으로 정렬
- ex) 객체 배열의 특정 프로퍼티 기준으로 정렬

*/